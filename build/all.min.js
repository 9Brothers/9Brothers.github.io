(function(){

	/**
	 * Decimal adjustment of a number.
	 *
	 * @param	{String}	type	The type of adjustment.
	 * @param	{Number}	value	The number.
	 * @param	{Integer}	exp		The exponent (the 10 logarithm of the adjustment base).
	 * @returns	{Number}			The adjusted value.
	 */
	function decimalAdjust(type, value, exp) {
		// If the exp is undefined or zero...
		if (typeof exp === 'undefined' || +exp === 0) {
			return Math[type](value);
		}
		value = +value;
		exp = +exp;
		// If the value is not a number or the exp is not an integer...
		if (isNaN(value) || !(typeof exp === 'number' && exp % 1 === 0)) {
			return NaN;
		}
		// Shift
		value = value.toString().split('e');
		value = Math[type](+(value[0] + 'e' + (value[1] ? (+value[1] - exp) : -exp)));
		// Shift back
		value = value.toString().split('e');
		return +(value[0] + 'e' + (value[1] ? (+value[1] + exp) : exp));
	}

	// Decimal round
	if (!Math.round10) {
		Math.round10 = function(value, exp) {
			return decimalAdjust('round', value, exp);
		};
	}
	// Decimal floor
	if (!Math.floor10) {
		Math.floor10 = function(value, exp) {
			return decimalAdjust('floor', value, exp);
		};
	}
	// Decimal ceil
	if (!Math.ceil10) {
		Math.ceil10 = function(value, exp) {
			return decimalAdjust('ceil', value, exp);
		};
	}

})();
(function(){
  'use strict'

  angular.module('cvcApp', [
    'ngAnimate',
    'ngSanitize',
    'ui.bootstrap',
    'cvcApp.directives',
    'cvcApp.factories',
    'cvcApp.filters',
    'cvcApp.controllers'
  ]);

  angular.module('cvcApp.directives', []);
  angular.module('cvcApp.factories', []);
  angular.module('cvcApp.filters', []);
  angular.module('cvcApp.controllers', []);
})();
(function() {
  'use strict'

  angular.module('cvcApp.directives')

  .directive('cars', function() {
    return {
      restrict: 'E',
      templateUrl: '/markups/cars.html'
    }
  })
})();
(function(){
  'use strict'

  angular.module('cvcApp.directives')

  .directive('filters', function() {
    return {
      restrict: 'E',
      templateUrl: '/markups/filters.html'
    }
  })
})();
(function(){
  'use strict'

  angular.module('cvcApp.directives')

  .directive('pagination', function(){
    return {
      restrict: 'E',
      templateUrl: '/markups/pagination.html'
    }
  })
})();
(function(){
  'use strict'

  angular.module('cvcApp.directives')

  .directive('sideMenu', function() {
    return {
      restric: 'E',
      templateUrl: '/markups/side-menu.html'
    }
  })
})();
(function () {
  'use strict'

  angular.module('cvcApp.factories')

    .factory('Commercials', [
      '$http', 
      function ($http) {
        return {
          get: function () {
            return $http.get('/json/commercials.json');
          }
        }
      }
    ])
})();
(function() {
'use strict';

  angular
    .module('cvcApp.factories')
    .factory('Places', Places);

  Places.inject = ['$http'];
  function Places($http) {
    var service = {
      get:get
    };
    
    return service;

    ////////////////
    function get() { 
      return $http.get('/json/places.json');
    }
  }
})();
(function(){
  'use strict'

  angular.module('cvcApp.filters')

  .filter('startFrom', function() {
    return function(input, start) {
      start = +start;

      return input.slice(start);
    }
  });
})();
(function () {
  angular.module('cvcApp.controllers')

    .controller('DefaultCtrl', [
      '$scope', 'Commercials', 'Places',
      function ($scope, Commercials, Places) {
        var vm = this;

        vm.itemsPerPage = 1;
        vm.currentPage = 1;
        vm.numberOfPages = function () {
          return Math.ceil10(vm.commercials.length / vm.itemsPerPage, 1)
        }

        vm.defaults = {
          commercials: []
        };

        vm.commercials = [];
        vm.places = [];
        vm.withdrawal = "";
        vm.showWithdrawal = true;

        vm.return = "";

        vm.orderBy = [
          { id: 1, value: "Menor Preço", sign: "" },
          { id: 2, value: "Maior Preço", sign: "-" }
        ];

        vm.moedas = [
          { id: 1, value: "Real" },
          { id: 2, value: "Dolar" }
        ];

        vm.select = {
          order: vm.orderBy[0],
          moeda: vm.moedas[0]
        };

        vm.qtyItems = vm.commercials.length;



        Commercials.get()
          .then(function success(response) {
            vm.commercials = response.data.results;

            vm.defaults.commercials = vm.commercials;
          }, function fail(response) {
            console.log("Commercials deu ruim, em!!");
          });

        Places.get()
          .then(function success(response) {
            vm.places = response.data.results;
          }, function fail(response) {
            console.log("Places deu ruim, em!!");
          });

        vm.setWithdrawal = function (obj) {
          vm.withdrawal = angular.copy(obj.withdrawal);          
          $('#select-local-retirada').hide();
        }

        vm.changeWithdrawal = function () {
          $('#select-local-retirada').show();
        }

        vm.setReturn = function (obj) {
          vm.return = angular.copy(obj.return);
          $('#select-local-devolucao').hide();
        }

        vm.changeReturn = function() {
          $('#select-local-devolucao').show();
        }

        vm.btnSearch = function () {
          if (!vm.withdrawal && !vm.return) vm.commercials = vm.defaults.commercials;

          vm.commercials = angular.copy(vm.defaults.commercials.filter(function (a) {
            if (vm.withdrawal && vm.return) return a.places.withdrawal.indexOf(vm.withdrawal) >= 0 && a.places.return.indexOf(vm.return) >= 0;
            else if (vm.withdrawal || vm.return) return a.places.withdrawal.indexOf(vm.withdrawal) >= 0 || a.places.return.indexOf(vm.return) >= 0;

            return true;
          }));
        }
      }
    ])
})();
//# sourceMappingURL=all.min.js.map
